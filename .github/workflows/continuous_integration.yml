name: continuous integration

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types:
      - published
      - edited

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash -leo pipefail {0}

jobs:
  test:
    runs-on: self-hosted
    timeout-minutes: 1440 # Set to 24 hours
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          # Check out full history for `setuptools_scm`
          fetch-depth: 0

      - name: Setup Micromamba
        uses: mamba-org/setup-micromamba@v2.0.7
        with:
          condarc: |
            channels:
              - conda-forge
              - https://fsl.fmrib.ox.ac.uk/fsldownloads/fslconda/public
          environment-name: test
          create-args: >-
            awscli
            boto3
            conda-build
            loguru
            pygithub
            py-rattler
            pyyaml
            setuptools_scm
            tqdm
          cache-environment: true
          init-shell: bash

      - name: Set up metadata
        id: metadata
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
          REGISTRY: ${{ secrets.REGISTRY }}
          PYTHONPATH: "src"
        run: |
          python -m build.metadata

      - name: Build Conda packages
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ENDPOINT_URL: ${{ secrets.AWS_ENDPOINT_URL }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          PUSH: ${{ steps.metadata.outputs.push }}
          PYTHONPATH: "src"
        run: |
          printf '%s' '${{ secrets.MATLAB_LICENSE }}' > ${HOME}/license.lic
          python -m build.conda

      - name: Login to DockerHub
        uses: docker/login-action@v3
        if: ${{ steps.metadata.outputs.push == 'true' }}
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to container registry
        uses: docker/login-action@v3
        if: ${{ steps.metadata.outputs.push == 'true' }}
        with:
          registry: ${{ secrets.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        id: buildx
      - name: Build container
        uses: docker/build-push-action@v6
        with:
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: ${{ steps.metadata.outputs.cache_from }}
          cache-to: ${{ steps.metadata.outputs.cache_to }}
          context: "."
          file: "./Dockerfile"
          labels: |
            ${{ steps.metadata.outputs.labels }}
          load: true
          platforms: linux/amd64
          push: false
          tags: |
            ${{ steps.metadata.outputs.build_tag }}

      - name: Cache data
        uses: actions/cache@v4
        with:
          key: resource-cache
          path: /home/runner/resource-cache
      - name: Setup integration test container
        run: |
          docker run \
            --detach \
            --rm \
            --name="test" \
            --volume="/home/runner/resource-cache:/var/cache/halfpipe" \
            --volume="/home/runner:/home/runner" \
            --volume="$(pwd):/halfpipe" \
            --workdir="/halfpipe" \
            --entrypoint="tail" \
            ${{ steps.metadata.outputs.build_tag }} \
            --follow /dev/null
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Run integration tests
        shell: docker exec test bash -x -e {0}
        env:
          # Enable pytest-github-actions-annotate-failures
          GITHUB_ACTIONS: true
        run: |
          # Install the Freesurfer license
          cat > ${FREESURFER_HOME}/license.txt <<EOF
          halfpipe@fmri.science
          73053
           *C8FMo8yrzcZA
           FSCA7.lDgNIow
           e1n3o06osRFD3qtBRgsTy9f9bQHGOpY/riIUrHoEx5c=
          EOF
          failure=0
          # Run the integration tests
          # echo "***Running TUI tests***"
          # py.test /home/runner/actions-runner/_work/HALFpipe/HALFpipe/tests/tui
          echo "***Running backend tests***"
          py.test -k 'not test_consistency' \
            --cov --cov-report=xml --dist=load \
            --numprocesses=2 \
            --ignore="/home/runner/actions-runner/_work/HALFpipe/HALFpipe/tests/tui"\
            --ignore=tests/tui
      - name: Upload snapshot report
        if: ${{ failure() }}
        uses: actions/upload-artifact@v5
        with:
          name: snapshot-report
          path: /home/runner/actions-runner/_work/HALFpipe/HALFpipe/snapshot_report.html
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          fail_ci_if_error: true
      - name: Stop integration test container
        run: |
          docker kill test

      - name: Push container to registry
        if: ${{ steps.metadata.outputs.push == 'true' }}
        uses: docker/build-push-action@v6
        with:
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: ${{ steps.metadata.outputs.cache_from }}
          context: "."
          file: "./Dockerfile"
          labels: |
            ${{ steps.metadata.outputs.labels }}
          platforms: linux/amd64
          push: true
          tags: |
            ${{ steps.metadata.outputs.push_tags }}

      - name: Set up Apptainer
        run: |
          sudo add-apt-repository --yes "ppa:apptainer/ppa"
          sudo apt install --yes "apptainer"

      - name: Build Singularity 2.x container
        if: ${{ steps.metadata.outputs.push == 'true' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ENDPOINT_URL: ${{ secrets.AWS_ENDPOINT_URL }}
        run: |
          mkdir "singularity-2"
          docker run \
            --privileged \
            --rm \
            --volume="/var/run/docker.sock:/var/run/docker.sock" \
            --volume="./singularity-2:/output" \
            "quay.io/singularity/docker2singularity:v2.6" \
            --name "${{ steps.metadata.outputs.singularity_name }}" \
            "${{ steps.metadata.outputs.build_tag }}"
          image_file=$(find "./singularity-2" -type f | head --lines=1)
          # Check if the container works
          apptainer run "${image_file}" --help
          # Upload the container
          aws s3 mv \
            --acl public-read \
            "${image_file}" \
            "s3://download-fmri-science/singularity/"

      - name: Build Apptainer container
        if: ${{ steps.metadata.outputs.push == 'true' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ENDPOINT_URL: ${{ secrets.AWS_ENDPOINT_URL }}
        run: |
          mkdir "singularity"
          apptainer build \
            --disable-cache \
            "./singularity/${{ steps.metadata.outputs.singularity_name }}" \
            "docker-daemon://${{ steps.metadata.outputs.build_tag }}"
          image_file=$(find "./singularity" -type f | head --lines=1)
          # Check if the container works
          apptainer run "${image_file}" --help
          # Upload the container
          aws s3 mv \
            --acl public-read \
            "${image_file}" \
            "s3://download-fmri-science/singularity/"
