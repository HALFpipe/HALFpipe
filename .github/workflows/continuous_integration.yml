name: continuous integration

on:
  push:
    branches: 
      - master 
  pull_request:
    branches: 
      - master

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Lint with flake8
        shell: bash
        run: |
          pip install flake8
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: "15.x"

      - name: Lint with Pyright
        shell: bash
        run: |
          npm install -g pyright
          echo '{ "typeCheckingMode": "off" }' > pyrightconfig.json
          pyright

  test:
    runs-on: ubuntu-latest
    
    # Docker Hub image that `container-job` executes in
    # Use latest
    container: ghcr.io/halfpipe/halfpipe:latest
    
    timeout-minutes: 360

    steps:
      - name: Checkout
        uses: actions/checkout@v2
  
      - name: Install FreeSurfer license file
        shell: bash
        env:
          FREESURFER_LICENSE_BASE64: "bGVhLndhbGxlckBjaGFyaXRlLmRlCjI3OTk5CiAqQ2R5NnNBR1BoQWlrCiBGU2t2cmduNFc0UXhRCg=="
        run: |
          echo ${FREESURFER_LICENSE_BASE64} | base64 --decode > ${FREESURFER_HOME}/license.txt

      - name: Cache data
        uses: actions/cache@v2
        with:
          path: /home
          key: ${{ runner.os }}-home

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install .[tests] 

      - name: Test with pytest with coverage
        shell: python
        run: |
          import sys
          import pytest
          sys.exit(
            pytest.main(["--cov", "--cov-report=xml"])
          )

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          fail_ci_if_error: true
