name: continuous integration

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types:
      - published
      - edited

jobs:
  test:
    runs-on: self-hosted
    container: ghcr.io/halfpipe/halfpipe:latest

    timeout-minutes: 360

    strategy:
      matrix:
        chunk:
          - interfaces
          - stats
          - workflows
          - feature_extraction
          - other
        include:
          - chunk: interfaces
            args: "tests/interfaces"
          - chunk: stats
            args: "tests/stats"
          - chunk: workflows
            args: "tests/workflows -k 'not test_feature_extraction'"
          - chunk: feature_extraction
            args: "tests/workflows/test_workflow.py::test_feature_extraction"
          - chunk: other
            args: "--ignore=tests/interfaces --ignore=tests/stats --ignore=tests/workflows"

    steps:
    - name: Cache data
      uses: actions/cache@v3
      with:
        path: /home
        key: ${{ runner.os }}-home

    - name: Checkout
      uses: actions/checkout@v3

    - name: Test with pytest with coverage
      shell: bash
      env:
        PYTHONDONTWRITEBYTECODE: 1
        GITHUB_ACTIONS: true  # enable pytest-github-actions-annotate-failures
      run: |
        pip install \
          --requirement requirements.txt \
          --requirement requirements-test.txt

        FREESURFER_LICENSE_BASE64="bGVhLndhbGxlckBjaGFyaXRlLmRlCjI3OTk5CiAqQ2R5NnNBR1BoQWlrCiBGU2t2cmduNFc0UXhRCg=="
        echo ${FREESURFER_LICENSE_BASE64} \
          | base64 --decode > ${FREESURFER_HOME}/license.txt

        python -m pytest ${{ matrix.args }} --cov --cov-report=xml

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: coverage_${{ matrix.chunk }}
        path: ./coverage.xml

  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Lint
        uses: github/super-linter/slim@v4.9.7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LOG_LEVEL: WARN

          DEFAULT_BRANCH: main
          LINTER_RULES_PATH: .

          VALIDATE_ALL_CODEBASE: true

          VALIDATE_PYTHON_BLACK: true

          VALIDATE_PYTHON_ISORT: true
          PYTHON_ISORT_CONFIG_FILE: pyproject.toml

          VALIDATE_PYTHON_FLAKE8: true
          PYTHON_FLAKE8_CONFIG_FILE: .flake8

          VALIDATE_PYTHON_MYPY: true
          PYTHON_MYPY_CONFIG_FILE: mypy.ini

  coverage:
    needs: test

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: Collect coverage files
        id: collect
        shell: bash
        run: |
          FILE=$(find . -name "coverage.xml" | paste --serial --delimiters=, -)
          echo "::set-output name=file::${FILE}"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ${{ steps.collect.file  }}
          fail_ci_if_error: true
