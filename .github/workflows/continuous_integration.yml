name: continuous integration

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    container: ghcr.io/halfpipe/halfpipe:latest

    timeout-minutes: 360

    strategy:
      matrix:
        chunk:
          - interfaces
          - stats
          - workflows
          - feature_extraction
          - other
        include:
          - chunk: interfaces
            args: "halfpipe/interfaces"
          - chunk: stats
            args: "halfpipe/stats"
          - chunk: workflows
            args: "halfpipe/workflows -k 'not test_feature_extraction'"
          - chunk: feature_extraction
            args: "halfpipe/workflows/tests/test_workflow.py::test_feature_extraction"
          - chunk: other
            args: "--ignore=halfpipe/interfaces --ignore=halfpipe/stats --ignore=halfpipe/workflows"

    steps:
      - name: Cache data
        uses: actions/cache@v2
        with:
          path: /home
          key: ${{ runner.os }}-home

      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup dependencies and license files
        shell: bash
        run: |
          pip install -r requirements.txt -r requirements-test.txt

          FREESURFER_LICENSE_BASE64="bGVhLndhbGxlckBjaGFyaXRlLmRlCjI3OTk5CiAqQ2R5NnNBR1BoQWlrCiBGU2t2cmduNFc0UXhRCg=="
          echo ${FREESURFER_LICENSE_BASE64} | base64 --decode > ${FREESURFER_HOME}/license.txt

      - name: Test with pytest with coverage
        shell: bash
        env:
          PYTHONDONTWRITEBYTECODE: 1
          GITHUB_ACTIONS: true  # enable pytest-github-actions-annotate-failures
        run: |
          pytest ${{ matrix.args }} --cov --cov-report=xml

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: coverage_${{ matrix.chunk }}
          path: ./coverage.xml

  coverage:
    needs: test

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: Collect coverage files
        id: collect
        shell: bash
        run: |
          FILE=$(find . -name "coverage.xml" | paste --serial --delimiters=, -)
          echo "::set-output name=file::${FILE}"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ${{ steps.collect.file  }}
          fail_ci_if_error: true
