# -*- coding: utf-8 -*-
# emacs: -*- mode: python; py-indent-offset: 4; indent-tabs-mode: nil -*-
# vi: set ft=python sts=4 ts=4 sw=4 et:

from argparse import ArgumentParser


def setup_argument_parser(argument_parser: ArgumentParser):
    group = argument_parser.add_argument_group(title="paths", description="define the input and output paths")
    group.add_argument(
        "--input-directory",
        "--working-directory",
        "--workdir",
        "--wd",
        type=str,
        nargs="+",
        action="extend",
        required=True,
        help="one or more input directories containing HALFpipe derivatives",
    )
    group.add_argument(
        "--output-directory",
        "--outdir",
        type=str,
        required=False,
        help="the directory to write the results to",
    )

    group = argument_parser.add_argument_group(title="filter", description="Arguments for filtering the inputs")
    group.add_argument(
        "--include",
        type=str,
        nargs=2,
        metavar=("TAG", "VALUE"),
        action="append",
        help="include only images with this tag and value. if multiple are specified, images must match one of them",
    )
    group.add_argument(
        "--include-list",
        type=str,
        nargs=2,
        metavar=("TAG", "PATH"),
        action="append",
        help="include only images with this tag and any of the values in the file",
    )
    group.add_argument(
        "--exclude",
        type=str,
        nargs=2,
        metavar=("TAG", "VALUE"),
        action="append",
        help="exclude images with this tag and value",
    )
    group.add_argument(
        "--exclude-list",
        type=str,
        nargs=2,
        metavar=("TAG", "PATH"),
        action="append",
        help="exclude images with this tag and any of the values in the file",
    )
    group.add_argument(
        "--fd-mean-cutoff",
        type=float,
        default=0.5,
        help="exclude subjects with a mean framewise displacement above this cutoff",
    )
    group.add_argument(
        "--fd-perc-cutoff",
        type=float,
        default=10,
        help="exclude subjects with a percentage of high framewise displacement volumes above this cutoff",
    )
    group.add_argument(
        "--missing-value-strategy",
        choices=("listwise-deletion",),
        default="listwise-deletion",
        help="the strategy to use for handling missing values in the covariates",
    )

    group = argument_parser.add_argument_group(title="modify", description="Arguments for modifying the inputs")
    group.add_argument(
        "--rename",
        type=str,
        nargs=3,
        metavar=("TAG", "FROM", "TO"),
        action="append",
        help="change all values of tag from the value `FROM` to the value `TO`",
    )
    group.add_argument(
        "--aggregate",
        type=str,
        metavar="across",
        nargs="+",
        action="extend",
        help="aggregate the images across the given tags with a fixed effects model",
    )

    group = argument_parser.add_argument_group(title="design", description="arguments for defining the design")
    group.add_argument(
        "--from-spec",
        default=False,
        action="store_true",
        help="load the model and filter from the working directory's `spec.json` file",
    )
    group.add_argument(
        "--model-name",
        type=str,
        help="the name of the model to use if running from a spec file",
    )
    group.add_argument(
        "--qc-exclude-files",
        type=str,
        nargs="+",
        action="extend",
        help="one or more exclude files generated by the quality check web interface",
    )
    group.add_argument(
        "--spreadsheet",
        type=str,
        required=False,
        help="the path to the spreadsheet containing model covariates",
    )
    group.add_argument(
        "--id-column",
        type=str,
        required=False,
        help="the name of the column containing the subject IDs",
    )
    group.add_argument(
        "--categorical-variable",
        type=str,
        action="append",
        help="add this variable to the model as a categorical variable. Requires specifying `--levels`",
    )
    group.add_argument(
        "--levels",
        type=str,
        nargs="+",
        action="append",
        help="the levels of the categorical variable",
    )
    group.add_argument(
        "--continuous-variable",
        type=str,
        action="append",
        help="add this variable to the model as a continuous variable",
    )
    group.add_argument(
        "--contrast",
        type=str,
        metavar="JSON",
        action="append",
        help="add a contrast in json format to the model",
    )

    group = argument_parser.add_argument_group(
        title="derived",
        description="arguments for adding variables and images derived from the data",
    )
    imaging_variables = (
        "fd_mean",
        "fd_perc",
        "mean_gm_tsnr",
        "aroma_noise_frac",
        "total_intracranial_volume",
        "jacobian_mean",
        "jacobian_variance",
    )
    group.add_argument(
        "--imaging-variable",
        choices=imaging_variables,
        action="extend",
        nargs="+",
        help="add this variable to the model as a continuous variable",
    )
    group.add_argument(
        "--derived-variable",
        type=str,
        nargs=2,
        metavar=("NAME", "FORMULA"),
        action="append",
        help="add this variable to the model as a variable derived from existing variables via the specified formula",
    )
    derived_images = ("jacobian",)
    group.add_argument(
        "--derived-image",
        choices=derived_images,
        action="extend",
        nargs="+",
        help="calculate this image from the data and add it to the model",
    )
    group.add_argument(
        "--drop-variable",
        type=str,
        action="extend",
        nargs="+",
        metavar=("NAME"),
        help="remove the variable from the covariates",
    )

    group = argument_parser.add_argument_group(title="stats", description="arguments for defining the statistics to run")
    algorithms = ("descriptive", "flame1", "heterogeneity", "mcartest")
    group.add_argument(
        "--algorithm",
        choices=algorithms,
        default=list(algorithms),
        nargs="+",
        action="extend",
        help="the algorithms to run for the analysis",
    )

    group = argument_parser.add_argument_group(title="export", description="arguments for exporting variables")
    group.add_argument(
        "--export-variable",
        type=str,
        action="extend",
        nargs="+",
        metavar=("NAME"),
        help="export the variable with this name as a phenotype",
    )
    group.add_argument(
        "--export-modes",
        type=str,
        nargs=3,
        metavar=("NAME", "IMAGE_PATH", "LABEL_PATH"),
        action="append",
        help="for all images, export the modes defined by the image/label files",
    )
    group.add_argument(
        "--export-atlas",
        type=str,
        nargs=4,
        metavar=("NAME", "TYPE", "IMAGE_PATH", "LABEL_PATH"),
        action="append",
        help="for all images, export region signals based on the atlas defined by the image/label files",
    )
    group.add_argument(
        "--minimum-atlas-coverage",
        type=float,
        default=0.5,
        help=(
            "the minimum proportion of voxels in each atlas region that must be covered by the subject-specific mask for "
            "region to be included in the analysis"
        ),
    )
